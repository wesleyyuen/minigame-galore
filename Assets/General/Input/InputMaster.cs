//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/General/Input/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""General"",
            ""id"": ""7ad67b3c-b0ab-40ab-b474-b33c454bf188"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""a2915fb4-309a-4026-8b08-19bcb3251856"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5bcb80a7-36f9-4b33-b8e3-906ae9373b6c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Rhythm"",
            ""id"": ""15fbc551-fb2f-4170-b7f6-3d51479144c5"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""8c99931a-fd44-43e8-a045-c1a089d017d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""3ca44910-c6af-4a1a-8b88-3578ff958b2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Center"",
                    ""type"": ""Button"",
                    ""id"": ""38905792-b8fd-4469-9867-714b9b536fec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""46816154-1f56-4db3-a11e-99fd58d1ff6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e0a0d0e7-d891-44f4-8823-630ec306c62e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c4737c2-89aa-44fe-8cf9-b433bb6b47bc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Center"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b044c6d6-264d-4caf-a2ca-fed7d071cf74"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb22bd54-4012-40e7-8fe4-57766b9608e3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TurnBasedRPG"",
            ""id"": ""594a5133-1650-453c-9b86-c51452b14799"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""f7f8224b-ac74-47c4-8957-553f077c2597"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""f2b8279e-947e-40c4-a797-c19f938e0c25"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerMovement"",
                    ""type"": ""Value"",
                    ""id"": ""cce0c172-9526-46b4-9f41-6ff4b87b6f76"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerInteract"",
                    ""type"": ""Button"",
                    ""id"": ""7e215928-fbfc-4756-87d6-8fba2b2e98df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""af1d20b0-e137-424e-8573-27d2c435eec0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a49ce50b-ad93-40d2-ae96-a5aa8452e55a"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ac68909-0423-4d1a-a0fc-e5506702f73d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""910b68db-650c-4f76-9c17-06102367baca"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""2e6a375e-ed09-4d47-847f-ad48f4734959"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8d8e4628-a86d-41c3-b580-599696cb796e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c5a56141-47b0-4fa3-8708-687f90ee1414"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5e7169c8-e3fb-4e70-b9b0-7a37a044fb70"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cdc602c3-7e56-4a08-901d-a35c494d1b38"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""63f15d2e-212b-40d1-9792-9ed6315d2e67"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Fighting"",
            ""id"": ""8916a2da-08d3-4eba-ad90-0d0734d9c75b"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""ad4e27a6-170e-4e4c-ae66-48c9b4df873e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerMovement"",
                    ""type"": ""Value"",
                    ""id"": ""1d84c1e1-78ca-493f-953a-4acc406f50f4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""734e73b1-1bb2-4fde-af75-077c77645628"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""1a26ef3c-4ac8-4275-a082-6689482fde32"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e1a91a27-ba85-4d4b-ab18-5af7cad94a02"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f4d1a2da-fef4-4c95-91f7-b7584211d7eb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b601c332-cb02-4976-ab4a-cef809ed9ba6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""157f4916-fbd0-425e-9e1c-dfddd817d1a7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0f827e81-548d-47e9-ae2b-67a82aefb48c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7367d405-b7fb-4bce-8664-77d58575b5f6"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        m_General_Pause = m_General.FindAction("Pause", throwIfNotFound: true);
        // Rhythm
        m_Rhythm = asset.FindActionMap("Rhythm", throwIfNotFound: true);
        m_Rhythm_Pause = m_Rhythm.FindAction("Pause", throwIfNotFound: true);
        m_Rhythm_Left = m_Rhythm.FindAction("Left", throwIfNotFound: true);
        m_Rhythm_Center = m_Rhythm.FindAction("Center", throwIfNotFound: true);
        m_Rhythm_Right = m_Rhythm.FindAction("Right", throwIfNotFound: true);
        // TurnBasedRPG
        m_TurnBasedRPG = asset.FindActionMap("TurnBasedRPG", throwIfNotFound: true);
        m_TurnBasedRPG_Pause = m_TurnBasedRPG.FindAction("Pause", throwIfNotFound: true);
        m_TurnBasedRPG_Back = m_TurnBasedRPG.FindAction("Back", throwIfNotFound: true);
        m_TurnBasedRPG_PlayerMovement = m_TurnBasedRPG.FindAction("PlayerMovement", throwIfNotFound: true);
        m_TurnBasedRPG_PlayerInteract = m_TurnBasedRPG.FindAction("PlayerInteract", throwIfNotFound: true);
        // Fighting
        m_Fighting = asset.FindActionMap("Fighting", throwIfNotFound: true);
        m_Fighting_Pause = m_Fighting.FindAction("Pause", throwIfNotFound: true);
        m_Fighting_PlayerMovement = m_Fighting.FindAction("PlayerMovement", throwIfNotFound: true);
        m_Fighting_Jump = m_Fighting.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // General
    private readonly InputActionMap m_General;
    private IGeneralActions m_GeneralActionsCallbackInterface;
    private readonly InputAction m_General_Pause;
    public struct GeneralActions
    {
        private @InputMaster m_Wrapper;
        public GeneralActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_General_Pause;
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_GeneralActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public GeneralActions @General => new GeneralActions(this);

    // Rhythm
    private readonly InputActionMap m_Rhythm;
    private IRhythmActions m_RhythmActionsCallbackInterface;
    private readonly InputAction m_Rhythm_Pause;
    private readonly InputAction m_Rhythm_Left;
    private readonly InputAction m_Rhythm_Center;
    private readonly InputAction m_Rhythm_Right;
    public struct RhythmActions
    {
        private @InputMaster m_Wrapper;
        public RhythmActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Rhythm_Pause;
        public InputAction @Left => m_Wrapper.m_Rhythm_Left;
        public InputAction @Center => m_Wrapper.m_Rhythm_Center;
        public InputAction @Right => m_Wrapper.m_Rhythm_Right;
        public InputActionMap Get() { return m_Wrapper.m_Rhythm; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RhythmActions set) { return set.Get(); }
        public void SetCallbacks(IRhythmActions instance)
        {
            if (m_Wrapper.m_RhythmActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_RhythmActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_RhythmActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_RhythmActionsCallbackInterface.OnPause;
                @Left.started -= m_Wrapper.m_RhythmActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_RhythmActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_RhythmActionsCallbackInterface.OnLeft;
                @Center.started -= m_Wrapper.m_RhythmActionsCallbackInterface.OnCenter;
                @Center.performed -= m_Wrapper.m_RhythmActionsCallbackInterface.OnCenter;
                @Center.canceled -= m_Wrapper.m_RhythmActionsCallbackInterface.OnCenter;
                @Right.started -= m_Wrapper.m_RhythmActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_RhythmActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_RhythmActionsCallbackInterface.OnRight;
            }
            m_Wrapper.m_RhythmActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Center.started += instance.OnCenter;
                @Center.performed += instance.OnCenter;
                @Center.canceled += instance.OnCenter;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
            }
        }
    }
    public RhythmActions @Rhythm => new RhythmActions(this);

    // TurnBasedRPG
    private readonly InputActionMap m_TurnBasedRPG;
    private ITurnBasedRPGActions m_TurnBasedRPGActionsCallbackInterface;
    private readonly InputAction m_TurnBasedRPG_Pause;
    private readonly InputAction m_TurnBasedRPG_Back;
    private readonly InputAction m_TurnBasedRPG_PlayerMovement;
    private readonly InputAction m_TurnBasedRPG_PlayerInteract;
    public struct TurnBasedRPGActions
    {
        private @InputMaster m_Wrapper;
        public TurnBasedRPGActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_TurnBasedRPG_Pause;
        public InputAction @Back => m_Wrapper.m_TurnBasedRPG_Back;
        public InputAction @PlayerMovement => m_Wrapper.m_TurnBasedRPG_PlayerMovement;
        public InputAction @PlayerInteract => m_Wrapper.m_TurnBasedRPG_PlayerInteract;
        public InputActionMap Get() { return m_Wrapper.m_TurnBasedRPG; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TurnBasedRPGActions set) { return set.Get(); }
        public void SetCallbacks(ITurnBasedRPGActions instance)
        {
            if (m_Wrapper.m_TurnBasedRPGActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_TurnBasedRPGActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_TurnBasedRPGActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_TurnBasedRPGActionsCallbackInterface.OnPause;
                @Back.started -= m_Wrapper.m_TurnBasedRPGActionsCallbackInterface.OnBack;
                @Back.performed -= m_Wrapper.m_TurnBasedRPGActionsCallbackInterface.OnBack;
                @Back.canceled -= m_Wrapper.m_TurnBasedRPGActionsCallbackInterface.OnBack;
                @PlayerMovement.started -= m_Wrapper.m_TurnBasedRPGActionsCallbackInterface.OnPlayerMovement;
                @PlayerMovement.performed -= m_Wrapper.m_TurnBasedRPGActionsCallbackInterface.OnPlayerMovement;
                @PlayerMovement.canceled -= m_Wrapper.m_TurnBasedRPGActionsCallbackInterface.OnPlayerMovement;
                @PlayerInteract.started -= m_Wrapper.m_TurnBasedRPGActionsCallbackInterface.OnPlayerInteract;
                @PlayerInteract.performed -= m_Wrapper.m_TurnBasedRPGActionsCallbackInterface.OnPlayerInteract;
                @PlayerInteract.canceled -= m_Wrapper.m_TurnBasedRPGActionsCallbackInterface.OnPlayerInteract;
            }
            m_Wrapper.m_TurnBasedRPGActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
                @PlayerMovement.started += instance.OnPlayerMovement;
                @PlayerMovement.performed += instance.OnPlayerMovement;
                @PlayerMovement.canceled += instance.OnPlayerMovement;
                @PlayerInteract.started += instance.OnPlayerInteract;
                @PlayerInteract.performed += instance.OnPlayerInteract;
                @PlayerInteract.canceled += instance.OnPlayerInteract;
            }
        }
    }
    public TurnBasedRPGActions @TurnBasedRPG => new TurnBasedRPGActions(this);

    // Fighting
    private readonly InputActionMap m_Fighting;
    private IFightingActions m_FightingActionsCallbackInterface;
    private readonly InputAction m_Fighting_Pause;
    private readonly InputAction m_Fighting_PlayerMovement;
    private readonly InputAction m_Fighting_Jump;
    public struct FightingActions
    {
        private @InputMaster m_Wrapper;
        public FightingActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Fighting_Pause;
        public InputAction @PlayerMovement => m_Wrapper.m_Fighting_PlayerMovement;
        public InputAction @Jump => m_Wrapper.m_Fighting_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Fighting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FightingActions set) { return set.Get(); }
        public void SetCallbacks(IFightingActions instance)
        {
            if (m_Wrapper.m_FightingActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_FightingActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_FightingActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_FightingActionsCallbackInterface.OnPause;
                @PlayerMovement.started -= m_Wrapper.m_FightingActionsCallbackInterface.OnPlayerMovement;
                @PlayerMovement.performed -= m_Wrapper.m_FightingActionsCallbackInterface.OnPlayerMovement;
                @PlayerMovement.canceled -= m_Wrapper.m_FightingActionsCallbackInterface.OnPlayerMovement;
                @Jump.started -= m_Wrapper.m_FightingActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_FightingActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_FightingActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_FightingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @PlayerMovement.started += instance.OnPlayerMovement;
                @PlayerMovement.performed += instance.OnPlayerMovement;
                @PlayerMovement.canceled += instance.OnPlayerMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public FightingActions @Fighting => new FightingActions(this);
    public interface IGeneralActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IRhythmActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnCenter(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
    public interface ITurnBasedRPGActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
        void OnPlayerMovement(InputAction.CallbackContext context);
        void OnPlayerInteract(InputAction.CallbackContext context);
    }
    public interface IFightingActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnPlayerMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
